#!bin/bash
#
# This file contains a small shell library that I use to start emacs.
#
# DEPRECATED COMMENTS:
# We use the following file as a variable to toggle whether we run emacs as a standalone tool or as a client/server.
# DISABLE_EMACS_SERVER_USAGE_FILE="$HOME/.local/state/paul_disables_emacs_server_usage" emacs-toggle-server() {
#   if [ -f "$DISABLE_EMACS_SERVER_USAGE_FILE" ]
#   then
#     rm "$DISABLE_EMACS_SERVER_USAGE_FILE"
#     echo "START emacs server mode"
#     emacs-start-server
#   else
#     touch "$DISABLE_EMACS_SERVER_USAGE_FILE"
#     echo "STOP emacs server mode. Running servers are terminated."
#     emacs-kill-server
#   fi
# }
# is-emacs-server() {
#   if [ -f "$DISABLE_EMACS_SERVER_USAGE_FILE" ]
#   then
#     echo "No, emacs will be run as standalone."
#   else
#     echo "Yes, emacs will run as client."
#   fi
# }
#

#### [ELISP ARGS FOR (DOOM) EMACS] ####
# I did not found an existing way to pass some elisp code to
# doom emacs that is run at startup.
# Hence, in the following, I implemented it myself.
# The idea is to have an (empty) elisp file.
# I called this file 'dynamic-args.el' and put it into my $DOOMDIR.
# My emacs config will run the code in this file, when emacs
# is started or whenever a new emacsclient connects.
# Hence, when I want emacs to run some elisp code right after
# initialization, I first write my code to the args file, and
# then start emacs.

# This variable points to the (initially empty) args file,
# which will be loaded dynamically at emacs startup, or whenever
# a client connects.
DOOM_ELISP_ARGS_FILE="${DOOMDIR}/dynamic-args.el"

DOOM_ELISP_ARGS_DISCLAIMER=";; Warning:
;; This is a generated file.
;; Do not edit or alter the file.
;; For more information, visit ~/.emacsrc."

# Shows the current elisp argument code.
doomElispArgsShow () {
  cat "${DOOM_ELISP_ARGS_FILE}"
}
# Erases all elisp arguments by emptying the args file.
doomElispArgsClear () {
  echo "${DOOM_ELISP_ARGS_DISCLAIMER}" > "${DOOM_ELISP_ARGS_FILE}"
}
# Sets the elisp arguments to the given code as string.
doomElispArgsSet () {
  echo "${DOOM_ELISP_ARGS_DISCLAIMER}\n${1}\n(message \"[ELISP ARGS] Started with custom elisp arguments!\")" > "${DOOM_ELISP_ARGS_FILE}"
}

#### [EMACS SERVER STUFF] ####
emacs-start-server() {
  pgrep emacs > /dev/null || emacs --daemon
  echo "Running emacs server under process id:"
  pgrep emacs
}
emacs-kill-server() {
  pkill emacs
}
emacs-restart-server() {
  emacs-kill-server
  sleep 1
  emacs-start-server
}
# shuts down all emacs servers, runs 'doom sync', and restarts server.
emacs-sync() {
  emacs-kill-server
  doom sync
  # if [ -f "$DISABLE_EMACS_SERVER_USAGE_FILE" ]
  # then
  # else
    emacs-start-server
  # fi
}

#### [LAUNCHING EMACS] ####

# We alias emacsclient with some default arguments.
my-emacsclient-alias() {
  # if [ -f "$DISABLE_EMACS_SERVER_USAGE_FILE" ]
  # then
    # (cd "$@" ; emacs &!)
  # else
    # emacs-start-server
    command emacsclient --reuse-frame --alternate-editor='emacs' "$@" &!
  # fi
}

my-emacs-alias() {
  command emacs "$@"
}

# This function will open emacs or emacsclient at the given file or directory.
# This function has two arguments.
# 1.) The first argument is mandatory and should be the emacs command to run (e.g., 'emacsclient' or 'emacs')
# 2.) The second argument is optional and should be a file or directory name as string.
# When no second argument is passed, this will just open emacs.
# When the second argument is a file, this function will open emacs
# opening the respective buffer.
# When the argument is a directory, this function will open emacs
# with the directory set as default-directory.
# (The default behavior of emacs for opening directories is to open dired.
# However, due to a bug in dired, it exits emacs once we open a file.
# Also, I don't really dired and you can hate me for it.
# I just wanted to always see the sexy DOOM splash screen but with
# the current directory (see modeline at the bottom) set to directory
# emacs was invoked with.
open-emacs-at() {
  if [ $# -eq 0 ]; then
    echo "ERROR: open-emacs-at requires an editor as first argument (emacs or emacsclient)"
    return 1
  fi

  local editor="$1"
  if [ $# -eq 1 ]; then
    # There was no directory argument, just invoke emacsclient.
    $editor
    return 1
  fi

  # Otherwise, there was at least one argument
  local item="$2"

  if [ -e "$item" ]; then
    if [ -f "$item" ]; then
      # If it was a file, just open that file in a buffer.
      $editor "$item"
    elif [ -d "$item" ]; then
      # If it was a directory, set it as the default directory in emacs and launch as usual.
      local abs_dir="$(cd "$(dirname "$item")" && pwd)/$(basename "$item")"
      local lisp="
(setq +doom-dashboard-pwd-policy \"${abs_dir}\")
(+doom-dashboard-reload)
(message \"[ELISP ARGS] Set doom pwd to: %s\" (+doom-dashboard--get-pwd))"
      doomElispArgsSet "${lisp}"
      echo "Starting emacs with the following lisp arguments:"
      doomElispArgsShow
      # touch "${abs_dir}/.projectile" # Maybe we can find a less intrusive way to temporarily make these dirs projects?
      $editor
      # Asynchronously wait for 2s and reset our arguments afterwards
      # to leave a clean place behind and not sabotage future invocations.
      # TODO: Can we reuse doomEmacsArgsClear here instead of having to inline it?
      sh -c "sleep 2s ; echo '${DOOM_ELISP_ARGS_DISCLAIMER}' > '${DOOM_ELISP_ARGS_FILE}'" & # ; hyprctl notify 1 2000 0 'cleared elisp args'
    else
      echo "'$item' exists, but is neither a regular file nor a directory."
      echo "This is not yet supported."
      echo "We could probably just treat symlinks as directories?"
    fi
  else
    # '$item' does not exist. We let emacs decide how to proceed.
    $editor "$item"
  fi
}

emacsclient() {
  open-emacs-at "my-emacsclient-alias" "$@"
}
emacs() {
  open-emacs-at "my-emacs-alias" "$@"
}

alias e='emacsclient'
alias ee='emacs'
alias es='emacs-sync'
alias er='emacs-sync ; e'
alias ers='emacs-restart-server'
